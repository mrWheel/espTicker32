const char *Weerlive::request()
{
  int   weerliveStatus = 0;
  char  tmpMessage[30] = {};
  bool  gotData        = false;

  debug->printf("weerlive::request() request() called\n");
  if (apiUrl.isEmpty())
  {
    weerliveText = "API URL not set";
    if (debug && doDebug) debug->println(weerliveText);
    return weerliveText.c_str();
  }

  if (debug && doDebug) debug->printf("\nrequest(): Weerlive request [%s]\n", apiHost);
  if (debug && doDebug) debug->printf("request(): Free Heap: [%d] bytes\n", ESP.getFreeHeap());
  if (debug && doDebug) debug->println(apiUrl);
  thisClient.setTimeout(2000);
  if (debug && doDebug) debug->printf("\nrequest(): Next: connect(%s, %d)\n\n", apiHost, 80);
  if (!thisClient.connect(apiHost, 80))
  {
    if (debug && doDebug) debug->printf("request(): connection to [%s] failed\n", apiHost);
    thisClient.flush();
    thisClient.stop();
    return "Error";
  }

  if (debug && doDebug) debug->printf("request(): connected to [%s]\n", apiHost);
  //-- This will send the request to the server
  if (debug && doDebug) debug->print(String("GET ") + apiUrl + " HTTP/1.1\r\n" +
               "Host: " + apiHost + "\r\n" +
               "Connection: close\r\n\r\n");
  thisClient.print(String("GET ") + apiUrl + " HTTP/1.1\r\n" +
                   "Host: " + apiHost + "\r\n" +
                   "Connection: close\r\n\r\n");
  delay(100);

  while ((thisClient.connected() || thisClient.available()) && !gotData)
  {
    yield();
    while(thisClient.available() && !gotData)
    {
      if (debug && doDebug) debug->println("weerlive::request(): looking for HTTP/1.1 ..");
      //--- skip to find HTTP/1.1
      //--- then parse response code
      if (thisClient.find("HTTP/1.1"))
      {
        if (debug && doDebug) debug->println("weerlive::request(): found HTTP/1.1 .. continue");
        //-- parse status code
        weerliveStatus = thisClient.parseInt();
        if (debug && doDebug) debug->printf("weerlive::request() plain weerliveStatus[%d]\n", weerliveStatus);
        snprintf(tmpMessage, sizeof(tmpMessage), "\nweerlive::request(): Statuscode: [%d]\n", weerliveStatus);
        if (debug && doDebug) debug->println(tmpMessage);
        if (weerliveStatus != 200)
        {
          if (debug && doDebug) debug->println("weerlive::request() ERROR!\n");
          thisClient.flush();
          thisClient.stop();
          return tmpMessage;
        }
        if (debug && doDebug) debug->println("weerlive::request() OK!\n");
      }
      else
      {
        if (debug && doDebug) debug->println("weerlive::request() Error reading weerLive.. -> bailout!\n");
        thisClient.flush();
        thisClient.stop();
        return "weerlive::request() Error reading Weerlive -> bailout";
      }
      //--- skip headers
      if (debug && doDebug) debug->println("weerlive::request() looking for headers ..");
      if (thisClient.find("\r\n\r\n"))
      {
        if (debug && doDebug) debug->println("weerlive::request() found headers .. continue");
        thisClient.setTimeout(100);
        //-- search for first occurence of a '{'
        thisClient.find("{");
        int charsRead = 0;
        //-- now read the rest of the response and put it in jsonResponse from pos 1 on
        charsRead = thisClient.readBytesUntil('\0',  jsonResponse+1, sizeof(jsonResponse)-1);
        if (debug && doDebug) debug->printf("weerlive::request(): jsonResponse[%s]\n", jsonResponse);
        //-- The first '{' is not in jsonResponse so put it at position 0
        jsonResponse[0] = '{';
#ifdef DEBUG
        if (debug && doDebug) debug->printf("weerlive::request(): charsRead[%d]\n", charsRead);
#endif  // DEBUG
        jsonResponse[charsRead-1] = '\0';
        jsonResponse[charsRead]   = '\0';
#ifdef DEBUG
        if (debug && doDebug) debug->printf("request(): got weerdata [%d] bytes\nrequest(): ===================\n%s\nrequest(): ========================\n\n", strlen(jsonResponse), jsonResponse);

        if (debug && doDebug) debug->printf("[0] is [%c], charsRead is [", jsonResponse[0]);
        if (debug && doDebug) debug->print(jsonResponse[charsRead], HEX);
        if (debug && doDebug) debug->println("]");
        if (debug && doDebug) debug->printf("request(): strlen(jsonResponse)[%d] >= sizeof(jsonResponse)[%d]\n", strlen(jsonResponse), sizeof(jsonResponse));
#endif  // DEBUG
        if (strlen(jsonResponse) >= (sizeof(jsonResponse)-2))
        {
          int p = charsRead;
          //-- if the jsonResponse is not complet look for the last '}'
          //-- from the last pos of jsonResponse towards the first pos
          //-- zond_perc_dag":64}],"uur_verw":[{"uur":"21-07-2024 11:00","timestamp":172
          //--                  ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
          for(p = (charsRead-4); p >= 0; p--)
          {
#ifdef DEBUG
            if (debug && doDebug) debug->printf("Pos[%d] is [%c]\n", p, jsonResponse[p]);
#endif  // DEBUG
            if (jsonResponse[p] == '}') break;
          }
#ifdef DEBUG
          if (debug && doDebug) debug->printf("Found '}' on pos[%d]\n", p);
          if (debug && doDebug) debug->println((p-40));
          for(int x=p-40; jsonResponse[x] != 0; x++) if (debug && doDebug) debug->print(jsonResponse[x]);
          if (debug && doDebug) debug->println();
#endif  // DEBUG
          //-- now complete the jsonResponse by adding "]}"
          charsRead = p;
          jsonResponse[charsRead] = '}';
          jsonResponse[charsRead+1] = ']';
          jsonResponse[charsRead+2] = '}';
          jsonResponse[charsRead+3] = '\0';
          jsonResponse[charsRead+4] = '\0';
        }
        //-- we now have a complete correct JSON string in jsonResponse. Ready to parse it.
        gotData = true;
#ifdef DEBUG
        if (debug && doDebug) debug->printf("request(): got weerdata [%d] bytes\nrequest(): ===================\n%s\nrequest(): ========================\n\n", strlen(jsonResponse), jsonResponse);
#endif  // DEBUG
      }
    } // while available ..

  } // connected ..

  thisClient.flush();
  thisClient.stop();

  if (weerliveStatus == 200)
  {
#ifdef DEBUG
    if (debug && doDebug) debug->printf("\nrequest(): jsonResponse ==[%d]===\n%s\nrequest(): =============\n\n", strlen(jsonResponse), jsonResponse);
#endif  // DEBUG
    if (strlen(jsonResponse) == 0)
    {
      if (debug && doDebug) debug->println(" ... Bailout!!\n");
      return weerliveText.c_str();
    }

    DeserializationError error = deserializeJson(doc, jsonResponse, DeserializationOption::Filter(filter));
    if (debug && doDebug) debug->printf("request(): After deserializeJson(): Free Heap: [%d] bytes\n", ESP.getFreeHeap());

    if (error)
    {
      weerliveText = "request(): WeerliveClass: deserializeJson() failed: " + String(error.f_str());
      if (debug && doDebug) debug->println(weerliveText);
      if (debug && doDebug) debug->printf("request(): Free Heap: [%d] bytes\n", ESP.getFreeHeap());
      return weerliveText.c_str();
    }

    weerliveText = "";

    if (debug && doDebug) debug->println("\nrequest(): Processliveweer ......  \n");
    JsonArray liveweerArray = doc["liveweer"];
    if (debug && doDebug) debug->printf("request(): After liveweerArray: Free Heap [%d] bytes\n", ESP.getFreeHeap());
    alarmInd = -1;
    for (JsonObject weather : liveweerArray)
    {
      for (JsonPair kv : weather)
      {
#ifdef DEBUG
        if (debug && doDebug) debug->print(kv.key().c_str());
        if (debug && doDebug) debug->print(": ");
        if (debug && doDebug) debug->println(kv.value().as<String>());
#endif  // DEBUG
        if (kv.key() == "plaats")
        {
          weerliveText += kv.value().as<String>();
        }
        else if (kv.key() == "time")
        {
          weerliveText += " " + kv.value().as<String>();
        }
        else if (kv.key() == "temp")
        {
          weerliveText += " " + kv.value().as<String>() + "째C";
        }
        else if (kv.key() == "gtemp")
        {
          weerliveText += " gevoelstemperatuur " + kv.value().as<String>() + "째C";
        }
        else if (kv.key() == "samenv")
        {
          weerliveText += " " + kv.value().as<String>();
        }
        else if (kv.key() == "lv")
        {
          weerliveText += " luchtvochtigheid " + kv.value().as<String>() + "%";
        }
        else if (kv.key() == "windr")
        {
          weerliveText += " windrichting " + kv.value().as<String>();
        }
        else if (kv.key() == "windrgr")
        {
          weerliveText += " windrichting " + kv.value().as<String>() + "째";
        }
        else if (kv.key() == "windms")
        {
          weerliveText += " " + kv.value().as<String>() + " m/s";
        }
        else if (kv.key() == "windbft")
        {
          weerliveText += " " + kv.value().as<String>() + " bft";
        }
        else if (kv.key() == "windknp")
        {
          weerliveText += " " + kv.value().as<String>() + " kts";
        }
        else if (kv.key() == "windkmh")
        {
          weerliveText += " " + kv.value().as<String>() + " km/h";
        }
        else if (kv.key() == "luchtd")
        {
          weerliveText += " luchtdruk " + kv.value().as<String>() + " hPa";
        }
        else if (kv.key() == "ldmmhg")
        {
          weerliveText += " luchtdruk " + kv.value().as<String>() + " mmHg";
        }
        else if (kv.key() == "dauwp")
        {
          weerliveText += " dauwpunt " + kv.value().as<String>() + "째C";
        }
        else if (kv.key() == "zicht")
        {
          weerliveText += " zicht " + kv.value().as<String>() +" m";
        }
        else if (kv.key() == "gr")
        {
          weerliveText += " globale (zonne)straling " + kv.value().as<String>() + " Watt/M2";
        }
        else if (kv.key() == "verw")
        {
          weerliveText += " dagverwachting: " + kv.value().as<String>();
        }
        else if (kv.key() == "sup")
        {
          weerliveText += " zon op " + kv.value().as<String>();
        }
        else if (kv.key() == "sunder")
        {
          weerliveText += " zon onder " + kv.value().as<String>();
        }
        else if (kv.key() == "image")
        {
          weerliveText += " " + kv.value().as<String>();
        }
        else if (kv.key() == "alarm")
        {
          alarmInd = kv.value().as<String>().toInt();
        }
        else if (kv.key() == "lkop" && (alarmInd == 1))
        {
          weerliveText += " waarschuwing: " + kv.value().as<String>();
        }
        else if (kv.key() == "ltekst" && (alarmInd == 1))
        {
          weerliveText += " waarschuwing: " + kv.value().as<String>();
        }
        else if (kv.key() == "wrschklr")
        {
          weerliveText += " KNMI kleurcode " + kv.value().as<String>();
        }
        else if (kv.key() == "wrsch_g"&& (alarmInd == 1))
        {
          weerliveText += " waarschuwing:" + kv.value().as<String>();
        }
        else if (kv.key() == "wrsch_gts" && (alarmInd == 1))
        {
          weerliveText += " Timestamp van waarschuwing " + kv.value().as<String>();
        }
        else if (kv.key() == "wrsch_gc" && (alarmInd == 1))
        {
          weerliveText += " kleurcode eerstkomende waarschuwing " + kv.value().as<String>();
        }
        else
        {
          //weerliveText += ", [" + String(kv.key().c_str()) + "] = " + kv.value().as<String>();
        }
      }
    }
    serializeJsonPretty(liveweerArray, Serial);
    Serial.println();
    if (debug && doDebug) debug->println("\nrequest(): Process wk_verw ......  \n");
    // Process the wk_verw array
    JsonArray wk_verwArray = doc["wk_verw"];
    if (debug && doDebug) debug->printf("request(): After wk_verwArray: Free Heap [%d] bytes\n\n", ESP.getFreeHeap());
    for (JsonVariant v : wk_verwArray)
    {
      JsonObject obj = v.as<JsonObject>();
      for (JsonPair kv : obj)
      {
#ifdef DEBUG
        if (debug && doDebug) debug->print(kv.key().c_str());
        if (debug && doDebug) debug->print(": ");
        if (debug && doDebug) debug->println(kv.value().as<String>());
#endif  // DEBUG

        if (kv.key() == "dag" && filter["wk_verw"][0]["dag"])
        {
          weerliveText += " | "+ String(dateToDayName(kv.value().as<String>().c_str()));
        }
        else if (kv.key() == "image" )
        {
          weerliveText += " " + kv.value().as<String>();
        }
        else if (kv.key() == "max_temp" )
        {
          weerliveText += " max " + kv.value().as<String>() + "째C";
        }
        else if (kv.key() == "min_temp" )
        {
          weerliveText += " min " + kv.value().as<String>() + "째C";
        }
        else if (kv.key() == "windbft")
        {
          weerliveText += " " + kv.value().as<String>() + " bft";
        }
        else if (kv.key() == "windkmh")
        {
          weerliveText += " " + kv.value().as<String>() + " km/h";
        }
        else if (kv.key() == "windms")
        {
          weerliveText += " " + kv.value().as<String>() + " m/s";
        }
        else if (kv.key() == "windknp")
        {
          weerliveText += " " + kv.value().as<String>() + " kts";
        }
        else if (kv.key() == "windrgr")
        {
          weerliveText += " windrichting " + kv.value().as<String>() + "째";
        }
        else if (kv.key() == "windr")
        {
          weerliveText += " windrichting " + kv.value().as<String>();
        }
        else if (kv.key() == "neersl_perc_dag")
        {
          weerliveText += " neerslag kans " + kv.value().as<String>() + "%";
        }
        else if (kv.key() == "zond_perc_dag")
        {
          weerliveText += " zon kans " + kv.value().as<String>() + "%";
        }
        else
        {
          //weerliveText += ", [" + String(kv.key().c_str()) + "] = " + kv.value().as<String>();
        }
      }
    }
#ifdef DEBUG
    if (debug && doDebug) debug->printf("\nrequest(): weerliveText is [%s]\n\n", weerliveText.c_str());
#endif  // DEBUG
  }
  else
  {
    weerliveText = "Error [" + String(weerliveStatus) + "] on HTTP request";
    if (debug && doDebug) debug->println(weerliveText);
#ifdef DEBUG
    if (debug && doDebug) debug->printf("[HTTP] GET... code: %d\n", weerliveStatus);
#endif  // DEBUG
    if (weerliveStatus == 429)
    {
      weerliveText = "request(): WeerliveClass: status [429] Too many requests";
#ifdef DEBUG
      if (debug && doDebug) debug->println(weerliveText);
#endif  // DEBUG
      return weerliveText.c_str();
    }
  }

  return weerliveText.c_str();


} //  request()

===== IMPROVED PART 1 ========================

const char *Weerlive::request()
{
  int   weerliveStatus = 0;
  char  tmpMessage[30] = {};
  bool  gotData        = false;
  unsigned long requestTimeout = millis() + 10000; // 10 second timeout

  if (debug) debug->printf("weerlive::request() request() called\n");
  if (apiUrl.isEmpty())
  {
    weerliveText = "API URL not set";
    if (debug && doDebug) debug->println(weerliveText);
    return weerliveText.c_str();
  }

  if (debug && doDebug) debug->printf("\nrequest(): Weerlive request [%s]\n", apiHost);
  if (debug && doDebug) debug->printf("request(): Free Heap: [%d] bytes\n", ESP.getFreeHeap());
  if (debug && doDebug) debug->println(apiUrl);
  thisClient.setTimeout(2000);
  if (debug && doDebug) debug->printf("\nrequest(): Next: connect(%s, %d)\n\n", apiHost, 80);
  if (!thisClient.connect(apiHost, 80))
  {
    if (debug && doDebug) debug->printf("request(): connection to [%s] failed\n", apiHost);
    thisClient.flush();
    thisClient.stop();
    return "Error";
  }

  if (debug && doDebug) debug->printf("request(): connected to [%s]\n", apiHost);
  //-- This will send the request to the server
  if (debug && doDebug) debug->print(String("GET ") + apiUrl + " HTTP/1.1\r\n" +
               "Host: " + apiHost + "\r\n" +
               "Connection: close\r\n\r\n");
  thisClient.print(String("GET ") + apiUrl + " HTTP/1.1\r\n" +
                   "Host: " + apiHost + "\r\n" +
                   "Connection: close\r\n\r\n");
  delay(100);

  // Clear the buffer before reading new data
  memset(jsonResponse, 0, sizeof(jsonResponse));
  
  while ((thisClient.connected() || thisClient.available()) && !gotData && millis() < requestTimeout)
  {
    yield();
    if (thisClient.available())
    {
      if (debug && doDebug) debug->println("weerlive::request(): looking for HTTP/1.1 ..");
      //--- skip to find HTTP/1.1
      //--- then parse response code
      if (thisClient.find("HTTP/1.1"))
      {
        if (debug && doDebug) debug->println("weerlive::request(): found HTTP/1.1 .. continue");
        //-- parse status code
        weerliveStatus = thisClient.parseInt();
        if (debug && doDebug) debug->printf("weerlive::request() plain weerliveStatus[%d]\n", weerliveStatus);
        snprintf(tmpMessage, sizeof(tmpMessage), "\nweerlive::request(): Statuscode: [%d]\n", weerliveStatus);
        if (debug && doDebug) debug->println(tmpMessage);
        if (weerliveStatus != 200)
        {
          if (debug && doDebug) debug->println("weerlive::request() ERROR!\n");
          thisClient.flush();
          thisClient.stop();
          return tmpMessage;
        }
        if (debug && doDebug) debug->println("weerlive::request() OK!\n");
      }
      else
      {
        if (debug && doDebug) debug->println("weerlive::request() Error reading weerLive.. -> bailout!\n");
        thisClient.flush();
        thisClient.stop();
        return "weerlive::request() Error reading Weerlive -> bailout";
      }
      //--- skip headers
      if (debug && doDebug) debug->println("weerlive::request() looking for headers ..");
      if (thisClient.find("\r\n\r\n"))
      {
        if (debug && doDebug) debug->println("weerlive::request() found headers .. continue");
        
        // Read the JSON response with timeout
        int charsRead = 0;
        int maxChars = sizeof(jsonResponse) - 2; // Leave space for null terminator
        unsigned long readTimeout = millis() + 5000; // 5 second read timeout
        
        // Find the opening brace
        if (thisClient.find("{")) {
          // Put the opening brace at the beginning of our buffer
          jsonResponse[0] = '{';
          charsRead = 1;
          
          // Read the rest of the JSON data
          while (thisClient.available() && charsRead < maxChars && millis() < readTimeout) {
            char c = thisClient.read();
            jsonResponse[charsRead++] = c;
            
            // If we find the final closing brace of the JSON object, we're done
            if (c == '}' && thisClient.peek() < 0) {
              break;
            }
            yield(); // Allow other tasks to run
          }
          
          // Ensure null termination
          jsonResponse[charsRead] = '\0';
          
          if (debug && doDebug) debug->printf("weerlive::request(): Read %d bytes of JSON data\n", charsRead);
          
          // Check if we have a complete JSON response
          // Look for the last closing brace and bracket
          if (charsRead > 5) {
            bool foundClosing = false;
            for (int i = charsRead - 1; i >= 0; i--) {
              if (jsonResponse[i] == '}') {
                // Make sure we have a proper ending
                jsonResponse[i+1] = '\0';
                foundClosing = true;
                break;
              }
            }
            
            if (!foundClosing) {
              // If we didn't find a proper closing, add one
              if (charsRead < maxChars - 2) {
                jsonResponse[charsRead] = '}';
                jsonResponse[charsRead+1] = '\0';
              }
            }
          }
          
          gotData = true;
        } else {
          if (debug && doDebug) debug->println("weerlive::request() Error: Could not find JSON start\n");
        }
      }
    }
    
    // Prevent getting stuck in the loop
    if (millis() > requestTimeout) {
      if (debug && doDebug) debug->println("weerlive::request() Error: Request timed out\n");
      break;
    }
  }

  thisClient.flush();
  thisClient.stop();

  if (!gotData) {
    weerliveText = "Error: Failed to get complete data from server";
    if (debug && doDebug) debug->println(weerliveText);
    return weerliveText.c_str();
  }

  if (weerliveStatus == 200)
  {
#ifdef DEBUG
    if (debug && doDebug) debug->printf("\nrequest(): jsonResponse ==[%d]===\n%s\nrequest(): =============\n\n", strlen(jsonResponse), jsonResponse);
#endif  // DEBUG
    if (strlen(jsonResponse) == 0)
    {
      if (debug && doDebug) debug->println(" ... Bailout!!\n");
      return weerliveText.c_str();
    }

    DeserializationError error = deserializeJson(doc, jsonResponse, DeserializationOption::Filter(filter));
    if (debug && doDebug) debug->printf("request(): After deserializeJson(): Free Heap: [%d] bytes\n", ESP.getFreeHeap());

    if (error)
    {
      weerliveText = "request(): WeerliveClass: deserializeJson() failed: " + String(error.f_str());
      if (debug && doDebug) debug->println(weerliveText);
      if (debug && doDebug) debug->printf("request(): Free Heap: [%d] bytes\n", ESP.getFreeHeap());
      return weerliveText.c_str();
    }

    weerliveText = "";

    if (debug && doDebug) debug->println("\nrequest(): Processliveweer ......  \n");
    JsonArray liveweerArray = doc["liveweer"];
    if (debug && doDebug) debug->printf("request(): After liveweerArray: Free Heap [%d] bytes\n", ESP.getFreeHeap());
    alarmInd = -1;
    for (JsonObject weather : liveweerArray)
    {
      for (JsonPair kv : weather)
      {
#ifdef DEBUG
        if (debug && doDebug) debug->print(kv.key().c_str());
        if (debug && doDebug) debug->print(": ");
        if (debug && doDebug) debug->println(kv.value().as<String>());
#endif  // DEBUG
        if (kv.key() == "plaats")
        {
          weerliveText += kv.value().as<String>();
        }
        else if (kv.key() == "time")
        {
          weerliveText += " " + kv.value().as<String>();
        }
        else if (kv.key() == "temp")
        {
          weerliveText += " " + kv.value().as<String>() + "째C";
        }
        else if (kv.key() == "gtemp")
        {
          weerliveText += " gevoelstemperatuur " + kv.value().as<String>() + "째C";
        }
        else if (kv.key() == "samenv")
        {
          weerliveText += " " + kv.value().as<String>();
        }
        else if (kv.key() == "lv")
        {
          weerliveText += " luchtvochtigheid " + kv.value().as<String>() + "%";
        }
        else if (kv.key() == "windr")
        {
          weerliveText += " windrichting " + kv.value().as<String>();
        }
        else if (kv.key() == "windrgr")
        {
          weerliveText += " windrichting " + kv.value().as<String>() + "째";
        }
        else if (kv.key() == "windms")
        {
          weerliveText += " " + kv.value().as<String>() + " m/s";
        }
        else if (kv.key() == "windbft")
        {
          weerliveText += " " + kv.value().as<String>() + " bft";
        }
        else if (kv.key() == "windknp")
        {
          weerliveText += " " + kv.value().as<String>() + " kts";
        }
        else if (kv.key() == "windkmh")
        {
          weerliveText += " " + kv.value().as<String>() + " km/h";
        }
        else if (kv.key() == "luchtd")
        {
          weerliveText += " luchtdruk " + kv.value().as<String>() + " hPa";
        }
        else if (kv.key() == "ldmmhg")
        {
          weerliveText += " luchtdruk " + kv.value().as<String>() + " mmHg";
        }
        else if (kv.key() == "dauwp")
        {
          weerliveText += " dauwpunt " + kv.value().as<String>() + "째C";
        }
        else if (kv.key() == "zicht")
        {
          weerliveText += " zicht " + kv.value().as<String>() +" m";
        }
        else if (kv.key() == "gr")
        {
          weerliveText += " globale (zonne)straling " + kv.value().as<String>() + " Watt/M2";
        }
        else if (kv.key() == "verw")
        {
          weerliveText += " dagverwachting: " + kv.value().as<String>();
        }
        else if (kv.key() == "sup")
        {
          weerliveText += " zon op " + kv.value().as<String>();
        }
        else if (kv.key() == "sunder")
        {
          weerliveText += " zon onder " + kv.value().as<String>();
        }
        else if (kv.key() == "image")
        {
          weerliveText += " " + kv.value().as<String>();
        }
        else if (kv.key() == "alarm")
        {
          alarmInd = kv.value().as<String>().toInt();
        }
        else if (kv.key() == "lkop" && (alarmInd == 1))
        {
          weerliveText += " waarschuwing: " + kv.value().as<String>();
        }
        else if (kv.key() == "ltekst" && (alarmInd == 1))
        {
          weerliveText += " waarschuwing: " + kv.value().as<String>();
        }
        else if (kv.key() == "wrschklr")
        {
          weerliveText += " KNMI kleurcode " + kv.value().as<String>();
        }
        else if (kv.key() == "wrsch_g"&& (alarmInd == 1))
        {
          weerliveText += " waarschuwing:" + kv.value().as<String>();
        }
        else if (kv.key() == "wrsch_gts" && (alarmInd == 1))
        {
          weerliveText += " Timestamp van waarschuwing " + kv.value().as<String>();
        }
        else if (kv.key() == "wrsch_gc" && (alarmInd == 1))
        {
          weerliveText += " kleurcode eerstkomende waarschuwing " + kv.value().as<String>();
        }
        else
        {
          //weerliveText += ", [" + String(kv.key().c_str()) + "] = " + kv.value().as<String>();
        }
      }
    }
    
    // Use debug stream instead of direct Serial output
    if (debug) {
      serializeJsonPretty(liveweerArray, *debug);
      debug->println();
    }
    
    if (debug && doDebug) debug->println("\nrequest(): Process wk_verw ......  \n");
    // Process the wk_verw array
    JsonArray wk_verwArray = doc["wk_verw"];
    if (debug && doDebug) debug->printf("request(): After wk_verwArray: Free Heap [%d] bytes\n\n", ESP.getFreeHeap());
    for (JsonVariant v : wk_verwArray)
    {
      JsonObject obj = v.as<JsonObject>();
      for (JsonPair kv : obj)
      {
#ifdef DEBUG
        if (debug && doDebug) debug->print(kv.key().c_str());
        if (debug && doDebug) debug->print(": ");
        if (debug && doDebug) debug->println(kv.value().as<String>());
#endif  // DEBUG

        if (kv.key() == "dag" && filter["wk_verw"][0]["dag"])
        {
          weerliveText += " | "+ String(dateToDayName(kv.value().as<String>().c_str()));
        }
        else if (kv.key() == "image" )
        {
          weerliveText += " " + kv.value().as<String>();
        }
        else if (kv.key() == "max_temp" )
        {
          weerliveText += " max " + kv.value().as<String>() + "째C";
        }
        else if (kv.key() == "min_temp" )
        {
          weerliveText += " min " + kv.value().as<String>() + "째C";
        }
        else if (kv.key() == "windbft")
        {
          weerliveText += " " + kv.value().as<String>() + " bft";
        }
        else if (kv.key() == "windkmh")
        {
          weerliveText += " " + kv.value().as<String>() + " km/h";
        }
        else if (kv.key() == "windms")
        {
          weerliveText += " " + kv.value().as<String>() + " m/s";
        }
        else if (kv.key() == "windknp")
        {
          weerliveText += " " + kv.value().as<String>() + " kts";
        }
        else if (kv.key() == "windrgr")
        {
          weerliveText += " windrichting " + kv.value().as<String>() + "째";
        }
        else if (kv.key() == "windr")
        {
          weerliveText += " windrichting " + kv.value().as<String>();
        }
        else if (kv.key() == "neersl_perc_dag")
        {
          weerliveText += " neerslag kans " + kv.value().as<String>() + "%";
        }
        else if (kv.key() == "zond_perc_dag")
        {
          weerliveText += " zon kans " + kv.value().as<String>() + "%";
        }
        else
        {
          //weerliveText += ", [" + String(kv.key().c_str()) + "] = " + kv.value().as<String>();
        }
      }
    }
#ifdef DEBUG
    if (debug && doDebug) debug->printf("\nrequest(): weerliveText is [%s]\n\n", weerliveText.c_str());
#endif  // DEBUG
  }
  else
  {
    weerliveText = "Error [" + String(weerliveStatus) + "] on HTTP request";
    if (debug && doDebug) debug->println(weerliveText);
#ifdef DEBUG
    if (debug && doDebug) debug->printf("[HTTP] GET... code: %d\n", weerliveStatus);
#endif  // DEBUG
    if (weerliveStatus == 429)
    {
      weerliveText = "request(): WeerliveClass: status [429] Too many requests";
#ifdef DEBUG
      if (debug && doDebug) debug->println(weerliveText);
#endif  // DEBUG
      return weerliveText.c_str();
    }
  }

  return weerliveText.c_str();
} //  request()


======================= THIS DOES NOT WORK ====================

const char *Weerlive::request()
{
  int   weerliveStatus = 0;
  char  tmpMessage[30] = {};
  bool  gotData        = false;
  unsigned long requestTimeout = millis() + 10000; // 10 second timeout

  if (debug) debug->printf("weerlive::request() request() called\n");
  if (apiUrl.isEmpty())
  {
    weerliveText = "API URL not set";
    if (debug && doDebug) debug->println(weerliveText);
    return weerliveText.c_str();
  }

  if (debug && doDebug) debug->printf("\nrequest(): Weerlive request [%s]\n", apiHost);
  if (debug && doDebug) debug->printf("request(): Free Heap: [%d] bytes\n", ESP.getFreeHeap());
  if (debug && doDebug) debug->println(apiUrl);
  thisClient.setTimeout(2000);
  if (debug && doDebug) debug->printf("\nrequest(): Next: connect(%s, %d)\n\n", apiHost, 80);
  if (!thisClient.connect(apiHost, 80))
  {
    if (debug && doDebug) debug->printf("request(): connection to [%s] failed\n", apiHost);
    thisClient.flush();
    thisClient.stop();
    return "Error";
  }

  if (debug && doDebug) debug->printf("request(): connected to [%s]\n", apiHost);
  //-- This will send the request to the server
  if (debug && doDebug) debug->print(String("GET ") + apiUrl + " HTTP/1.1\r\n" +
               "Host: " + apiHost + "\r\n" +
               "Connection: close\r\n\r\n");
  thisClient.print(String("GET ") + apiUrl + " HTTP/1.1\r\n" +
                   "Host: " + apiHost + "\r\n" +
                   "Connection: close\r\n\r\n");
  delay(100);

  // Skip HTTP headers
  if (!thisClient.find("HTTP/1.1")) {
    if (debug && doDebug) debug->println("weerlive::request() Error: Could not find HTTP/1.1\n");
    thisClient.flush();
    thisClient.stop();
    return "Error: Invalid HTTP response";
  }
  
  // Parse status code
  weerliveStatus = thisClient.parseInt();
  if (debug && doDebug) debug->printf("weerlive::request() plain weerliveStatus[%d]\n", weerliveStatus);
  
  if (weerliveStatus != 200) {
    if (debug && doDebug) debug->println("weerlive::request() ERROR!\n");
    thisClient.flush();
    thisClient.stop();
    weerliveText = "Error [" + String(weerliveStatus) + "] on HTTP request";
    return weerliveText.c_str();
  }
  
  // Find the end of headers
  if (!thisClient.find("\r\n\r\n")) {
    if (debug && doDebug) debug->println("weerlive::request() Error: Could not find end of headers\n");
    thisClient.flush();
    thisClient.stop();
    return "Error: Invalid HTTP response";
  }
  
  if (debug && doDebug) debug->println("weerlive::request() found headers .. continue");
  
  // Read the entire response into a String
  String jsonString = "";
  unsigned long contentTimeout = millis() + 5000; // 5 second timeout for content
  
  while (thisClient.connected() && millis() < contentTimeout) {
    while (thisClient.available()) {
      char c = thisClient.read();
      jsonString += c;
      contentTimeout = millis() + 1000; // Reset timeout on data received
    }
    
    yield(); // Allow other tasks to run
    
    // If we've been waiting for a while with no data, break
    if (!thisClient.available()) {
      delay(10);
    }
  }
  
  thisClient.flush();
  thisClient.stop();
  
  if (jsonString.length() == 0) {
    weerliveText = "Error: No data received from server";
    if (debug && doDebug) debug->println(weerliveText);
    return weerliveText.c_str();
  }
  
  // Parse the JSON
  doc.clear();
  DeserializationError error = deserializeJson(doc, jsonString);
  
  if (error) {
    weerliveText = "request(): WeerliveClass: deserializeJson() failed: " + String(error.f_str());
    if (debug && doDebug) debug->println(weerliveText);
    if (debug && doDebug) debug->printf("request(): Free Heap: [%d] bytes\n", ESP.getFreeHeap());
    return weerliveText.c_str();
  }
  
  if (debug && doDebug) debug->printf("request(): After deserializeJson(): Free Heap: [%d] bytes\n", ESP.getFreeHeap());
  
  weerliveText = "";

  if (debug && doDebug) debug->println("\nrequest(): Processliveweer ......  \n");
  JsonArray liveweerArray = doc["liveweer"];
  if (debug && doDebug) debug->printf("request(): After liveweerArray: Free Heap [%d] bytes\n", ESP.getFreeHeap());
  alarmInd = -1;
  for (JsonObject weather : liveweerArray)
  {
    for (JsonPair kv : weather)
    {
#ifdef DEBUG
      if (debug && doDebug) debug->print(kv.key().c_str());
      if (debug && doDebug) debug->print(": ");
      if (debug && doDebug) debug->println(kv.value().as<String>());
#endif  // DEBUG
      if (kv.key() == "plaats")
      {
        weerliveText += kv.value().as<String>();
      }
      else if (kv.key() == "time")
      {
        weerliveText += " " + kv.value().as<String>();
      }
      else if (kv.key() == "temp")
      {
        weerliveText += " " + kv.value().as<String>() + "째C";
      }
      else if (kv.key() == "gtemp")
      {
        weerliveText += " gevoelstemperatuur " + kv.value().as<String>() + "째C";
      }
      else if (kv.key() == "samenv")
      {
        weerliveText += " " + kv.value().as<String>();
      }
      else if (kv.key() == "lv")
      {
        weerliveText += " luchtvochtigheid " + kv.value().as<String>() + "%";
      }
      else if (kv.key() == "windr")
      {
        weerliveText += " windrichting " + kv.value().as<String>();
      }
      else if (kv.key() == "windrgr")
      {
        weerliveText += " windrichting " + kv.value().as<String>() + "째";
      }
      else if (kv.key() == "windms")
      {
        weerliveText += " " + kv.value().as<String>() + " m/s";
      }
      else if (kv.key() == "windbft")
      {
        weerliveText += " " + kv.value().as<String>() + " bft";
      }
      else if (kv.key() == "windknp")
      {
        weerliveText += " " + kv.value().as<String>() + " kts";
      }
      else if (kv.key() == "windkmh")
      {
        weerliveText += " " + kv.value().as<String>() + " km/h";
      }
      else if (kv.key() == "luchtd")
      {
        weerliveText += " luchtdruk " + kv.value().as<String>() + " hPa";
      }
      else if (kv.key() == "ldmmhg")
      {
        weerliveText += " luchtdruk " + kv.value().as<String>() + " mmHg";
      }
      else if (kv.key() == "dauwp")
      {
        weerliveText += " dauwpunt " + kv.value().as<String>() + "째C";
      }
      else if (kv.key() == "zicht")
      {
        weerliveText += " zicht " + kv.value().as<String>() +" m";
      }
      else if (kv.key() == "gr")
      {
        weerliveText += " globale (zonne)straling " + kv.value().as<String>() + " Watt/M2";
      }
      else if (kv.key() == "verw")
      {
        weerliveText += " dagverwachting: " + kv.value().as<String>();
      }
      else if (kv.key() == "sup")
      {
        weerliveText += " zon op " + kv.value().as<String>();
      }
      else if (kv.key() == "sunder")
      {
        weerliveText += " zon onder " + kv.value().as<String>();
      }
      else if (kv.key() == "image")
      {
        weerliveText += " " + kv.value().as<String>();
      }
      else if (kv.key() == "alarm")
      {
        alarmInd = kv.value().as<String>().toInt();
      }
      else if (kv.key() == "lkop" && (alarmInd == 1))
      {
        weerliveText += " waarschuwing: " + kv.value().as<String>();
      }
      else if (kv.key() == "ltekst" && (alarmInd == 1))
      {
        weerliveText += " waarschuwing: " + kv.value().as<String>();
      }
      else if (kv.key() == "wrschklr")
      {
        weerliveText += " KNMI kleurcode " + kv.value().as<String>();
      }
      else if (kv.key() == "wrsch_g"&& (alarmInd == 1))
      {
        weerliveText += " waarschuwing:" + kv.value().as<String>();
      }
      else if (kv.key() == "wrsch_gts" && (alarmInd == 1))
      {
        weerliveText += " Timestamp van waarschuwing " + kv.value().as<String>();
      }
      else if (kv.key() == "wrsch_gc" && (alarmInd == 1))
      {
        weerliveText += " kleurcode eerstkomende waarschuwing " + kv.value().as<String>();
      }
      else
      {
        //weerliveText += ", [" + String(kv.key().c_str()) + "] = " + kv.value().as<String>();
      }
    }
  }
  
  // Use debug stream instead of direct Serial output
  if (debug) {
    serializeJsonPretty(liveweerArray, *debug);
    debug->println();
  }
  
  if (debug && doDebug) debug->println("\nrequest(): Process wk_verw ......  \n");
  // Process the wk_verw array
  JsonArray wk_verwArray = doc["wk_verw"];
  if (debug && doDebug) debug->printf("request(): After wk_verwArray: Free Heap [%d] bytes\n\n", ESP.getFreeHeap());
  for (JsonVariant v : wk_verwArray)
  {
    JsonObject obj = v.as<JsonObject>();
    for (JsonPair kv : obj)
    {
#ifdef DEBUG
      if (debug && doDebug) debug->print(kv.key().c_str());
      if (debug && doDebug) debug->print(": ");
      if (debug && doDebug) debug->println(kv.value().as<String>());
#endif  // DEBUG

      if (kv.key() == "dag" && filter["wk_verw"][0]["dag"])
      {
        weerliveText += " | "+ String(dateToDayName(kv.value().as<String>().c_str()));
      }
      else if (kv.key() == "image" )
      {
        weerliveText += " " + kv.value().as<String>();
      }
      else if (kv.key() == "max_temp" )
      {
        weerliveText += " max " + kv.value().as<String>() + "째C";
      }
      else if (kv.key() == "min_temp" )
      {
        weerliveText += " min " + kv.value().as<String>() + "째C";
      }
      else if (kv.key() == "windbft")
      {
        weerliveText += " " + kv.value().as<String>() + " bft";
      }
      else if (kv.key() == "windkmh")
      {
        weerliveText += " " + kv.value().as<String>() + " km/h";
      }
      else if (kv.key() == "windms")
      {
        weerliveText += " " + kv.value().as<String>() + " m/s";
      }
      else if (kv.key() == "windknp")
      {
        weerliveText += " " + kv.value().as<String>() + " kts";
      }
      else if (kv.key() == "windrgr")
      {
        weerliveText += " windrichting " + kv.value().as<String>() + "째";
      }
      else if (kv.key() == "windr")
      {
        weerliveText += " windrichting " + kv.value().as<String>();
      }
      else if (kv.key() == "neersl_perc_dag")
      {
        weerliveText += " neerslag kans " + kv.value().as<String>() + "%";
      }
      else if (kv.key() == "zond_perc_dag")
      {
        weerliveText += " zon kans " + kv.value().as<String>() + "%";
      }
      else
      {
        //weerliveText += ", [" + String(kv.key().c_str()) + "] = " + kv.value().as<String>();
      }
    }
  }
  
  if (debug && doDebug) debug->printf("\nrequest(): weerliveText is [%s]\n\n", weerliveText.c_str());
  
  return weerliveText.c_str();
  
} //  request()
