# GitHub Actions workflow: Auto-tag releases based on version in SolarisOne.cpp
# Don't forget to go to [Settings] -> [Actions] -> [General] 
# and set the workflow permissions to "Read and write permissions" for the workflow to push tags.
#
# This workflow will:
# 1. Trigger on push to the main branch.
# 2. Extract the version from PROGRAM_FILE (expected format: const char* PROG_VERSION = "v1.2.3";)
# 3. Fetch all existing tags.
# 4. Determine the latest semver-style tag starting with "v".
# 5. Compare the current version with the latest tag.
# 6. If the current version is greater than the latest tag, create or update the tag to point to the latest commit.
# 7. If the current version is older than the latest tag, skip tagging and log a warning.
# 8. If the current version is equal to the latest tag, force update the tag to point to the latest commit.
# 9. If no tags exist, create the first tag.

name: Auto Tag Release

env:
  PROGRAM_NAME: "espTicker32"
  PROGRAM_FILE: "src/espTicker32.cpp"

on:
  push:
    branches:
      - main

jobs:
  tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get version from ${{ env.PROGRAM_NAME }}
        id: get_version
        run: |
          VERSION=$(grep 'const char\* PROG_VERSION' ${{ env.PROGRAM_FILE }} | sed -E 's/.*"([^"]+)".*/\1/')
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest semver tag
        id: latest_tag
        run: |
          LATEST=$(git tag --sort=-v:refname | grep -E '^v([0-9]+\.){2}[0-9]+$' | head -n 1 || true)
          echo "DEBUG: LATEST=$LATEST"
          echo "LATEST=$LATEST" >> $GITHUB_OUTPUT

      - name: Compare version
        id: compare_version
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          LATEST="${{ steps.latest_tag.outputs.LATEST }}"

          echo "Comparing ${{ env.PROGRAM_NAME }} VERSION: $VERSION with LATEST: $LATEST"

          if [ -z "$VERSION" ]; then
            echo "::error::No version found in ${{ env.PROGRAM_FILE }}. Skipping tagging."
            echo "PROCEED=false" >> $GITHUB_ENV
            exit 0
          fi

          if [ -z "$LATEST" ]; then
            echo "No existing tag found. Proceeding to tag."
            echo "PROCEED=true" >> $GITHUB_ENV
          elif [ "$VERSION" = "$LATEST" ]; then
            echo "::notice::Version $VERSION already exists. Will force update the tag to the latest commit."
            echo "PROCEED=true" >> $GITHUB_ENV
          elif [ "$(printf '%s\n' "$LATEST" "$VERSION" | sort -V | head -n1)" = "$VERSION" ]; then
            echo "::warning::Version $VERSION is not greater than $LATEST. Skipping tagging."
            echo "PROCEED=false" >> $GITHUB_ENV
          else
            echo "Version $VERSION is newer than $LATEST. Proceeding to tag."
            echo "PROCEED=true" >> $GITHUB_ENV
          fi

      - name: Create or update tag
        if: env.PROCEED == 'true' && env.VERSION != ''
        run: |
          echo "Creating or updating tag for ${{ env.PROGRAM_NAME }}: $VERSION"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Delete tag locally and remotely if it already exists
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists. Deleting existing tag."
            git tag -d "$VERSION"
            git push --delete origin "$VERSION"
          fi

          # Create new tag and push to remote
          git tag "$VERSION"
          git push origin "$VERSION"
