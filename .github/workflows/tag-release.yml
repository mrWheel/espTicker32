# GitHub Actions workflow: Auto-tag releases based on version in espTicker32.cpp

name: Auto Tag Release

# Run this workflow only when pushing to the main branch
on:
  push:
    branches:
      - main

jobs:
  tag:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Extract version from espTicker32.cpp (expects format: const char* ESPTICKER32_VERSION = "v1.2.3";)
      - name: Get version from espTicker32.cpp
        id: get_version
        run: |
          VERSION=$(grep 'const char\* ESPTICKER32_VERSION' src/espTicker32.cpp | sed -E 's/.*"([^"]+)".*/\1/')
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      # Step 3: Fetch all existing Git tags
      - name: Fetch all tags
        run: git fetch --tags

      # Step 4: Determine the latest semver-style tag starting with "v"
      - name: Get latest semver tag
        id: latest_tag
        run: |
          # Get latest tag that matches semver format (v1.2.3)
          LATEST=$(git tag --sort=-v:refname | grep -E '^v([0-9]+\.){2}[0-9]+$' | head -n 1 || true)
          echo "DEBUG: LATEST=$LATEST"
          echo "LATEST=$LATEST" >> $GITHUB_OUTPUT

      # Step 5: Compare current version with latest tag and decide whether to proceed
      - name: Compare version
        id: compare_version
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          LATEST="${{ steps.latest_tag.outputs.LATEST }}"

          echo "Comparing VERSION: $VERSION with LATEST: $LATEST"

          if [ -z "$LATEST" ]; then
            echo "No existing tag found. Proceeding to tag."
            echo "PROCEED=true" >> $GITHUB_ENV
          elif [ "$VERSION" = "$LATEST" ]; then
            echo "::warning::Version $VERSION already exists. Skipping tagging."
            echo "PROCEED=false" >> $GITHUB_ENV
          elif [ "$(printf '%s\n' "$LATEST" "$VERSION" | sort -V | head -n1)" != "$VERSION" ]; then
            echo "::warning::Version $VERSION is not greater than $LATEST. Skipping tagging."
            echo "PROCEED=false" >> $GITHUB_ENV
          else
            echo "Version $VERSION is newer than $LATEST. Proceeding to tag."
            echo "PROCEED=true" >> $GITHUB_ENV
          fi

      # Step 6: Create and push new tag if approved
      - name: Create and push tag
        if: env.PROCEED == 'true'
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "$VERSION"
          git push origin "$VERSION"
          